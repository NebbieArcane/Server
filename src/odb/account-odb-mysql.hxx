// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ACCOUNT_ODB_MYSQL_HXX
#define ACCOUNT_ODB_MYSQL_HXX

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "account.hpp"

#include "account-odb.hxx"

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>
#include <odb/mysql/query-dynamic.hxx>

namespace odb
{
  // toon
  //
  template <typename A>
  struct pointer_query_columns< ::Alarmud::toon, id_mysql, A >
  {
    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    name_type_;

    static const name_type_ name;

    // password
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    password_type_;

    static const password_type_ password;

    // owner_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    owner_id_type_;

    static const owner_id_type_ owner_id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename pointer_query_columns< ::Alarmud::toon, id_mysql, A >::name_type_
  pointer_query_columns< ::Alarmud::toon, id_mysql, A >::
  name (pointer_query_columns< ::Alarmud::toon, id_common, typename A::common_traits >::name,
        A::table_name, "`name`", 0);

  template <typename A>
  const typename pointer_query_columns< ::Alarmud::toon, id_mysql, A >::password_type_
  pointer_query_columns< ::Alarmud::toon, id_mysql, A >::
  password (pointer_query_columns< ::Alarmud::toon, id_common, typename A::common_traits >::password,
            A::table_name, "`password`", 0);

  template <typename A>
  const typename pointer_query_columns< ::Alarmud::toon, id_mysql, A >::owner_id_type_
  pointer_query_columns< ::Alarmud::toon, id_mysql, A >::
  owner_id (pointer_query_columns< ::Alarmud::toon, id_common, typename A::common_traits >::owner_id,
            A::table_name, "`owner_id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  template <>
  class access::object_traits_impl< ::Alarmud::toon, id_mysql >:
    public access::object_traits< ::Alarmud::toon >
  {
    public:
    typedef access::object_traits_impl< ::Alarmud::toon, id_common > common_traits;

    struct id_image_type
    {
      details::buffer id_value;
      unsigned long id_size;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // name
      //
      details::buffer name_value;
      unsigned long name_size;
      my_bool name_null;

      // password
      //
      details::buffer password_value;
      unsigned long password_size;
      my_bool password_null;

      // owner_id
      //
      unsigned long long owner_id_value;
      my_bool owner_id_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    static odb::details::shared_ptr<prepared_query_impl>
    prepare_query (connection&, const char*, const query_base_type&);

    static odb::details::shared_ptr<prepared_query_impl>
    prepare_query (connection&, const char*, const odb::query_base&);

    static odb::details::shared_ptr<result_impl>
    execute_query (prepared_query_impl&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // user
  //
  template <typename A>
  struct query_columns< ::Alarmud::user, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;

    // nickname
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    nickname_type_;

    static const nickname_type_ nickname;

    // realname
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    realname_type_;

    static const realname_type_ realname;

    // email
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    email_type_;

    static const email_type_ email;

    // backup_email
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    backup_email_type_;

    static const backup_email_type_ backup_email;

    // password
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    password_type_;

    static const password_type_ password;

    // token
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    token_type_;

    static const token_type_ token;

    // level
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        short unsigned int,
        mysql::id_ushort >::query_type,
      mysql::id_ushort >
    level_type_;

    static const level_type_ level;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::Alarmud::user, id_mysql, A >::id_type_
  query_columns< ::Alarmud::user, id_mysql, A >::
  id (query_columns< ::Alarmud::user, id_common, typename A::common_traits >::id,
      A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::Alarmud::user, id_mysql, A >::nickname_type_
  query_columns< ::Alarmud::user, id_mysql, A >::
  nickname (query_columns< ::Alarmud::user, id_common, typename A::common_traits >::nickname,
            A::table_name, "`nickname`", 0);

  template <typename A>
  const typename query_columns< ::Alarmud::user, id_mysql, A >::realname_type_
  query_columns< ::Alarmud::user, id_mysql, A >::
  realname (query_columns< ::Alarmud::user, id_common, typename A::common_traits >::realname,
            A::table_name, "`realname`", 0);

  template <typename A>
  const typename query_columns< ::Alarmud::user, id_mysql, A >::email_type_
  query_columns< ::Alarmud::user, id_mysql, A >::
  email (query_columns< ::Alarmud::user, id_common, typename A::common_traits >::email,
         A::table_name, "`email`", 0);

  template <typename A>
  const typename query_columns< ::Alarmud::user, id_mysql, A >::backup_email_type_
  query_columns< ::Alarmud::user, id_mysql, A >::
  backup_email (query_columns< ::Alarmud::user, id_common, typename A::common_traits >::backup_email,
                A::table_name, "`backup_email`", 0);

  template <typename A>
  const typename query_columns< ::Alarmud::user, id_mysql, A >::password_type_
  query_columns< ::Alarmud::user, id_mysql, A >::
  password (query_columns< ::Alarmud::user, id_common, typename A::common_traits >::password,
            A::table_name, "`password`", 0);

  template <typename A>
  const typename query_columns< ::Alarmud::user, id_mysql, A >::token_type_
  query_columns< ::Alarmud::user, id_mysql, A >::
  token (query_columns< ::Alarmud::user, id_common, typename A::common_traits >::token,
         A::table_name, "`token`", 0);

  template <typename A>
  const typename query_columns< ::Alarmud::user, id_mysql, A >::level_type_
  query_columns< ::Alarmud::user, id_mysql, A >::
  level (query_columns< ::Alarmud::user, id_common, typename A::common_traits >::level,
         A::table_name, "`level`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  struct pointer_query_columns< ::Alarmud::user, id_mysql, A >:
    query_columns< ::Alarmud::user, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::Alarmud::user, id_mysql >:
    public access::object_traits< ::Alarmud::user >
  {
    public:
    typedef access::object_traits_impl< ::Alarmud::user, id_common > common_traits;

    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      unsigned long long id_value;
      my_bool id_null;

      // nickname
      //
      details::buffer nickname_value;
      unsigned long nickname_size;
      my_bool nickname_null;

      // realname
      //
      details::buffer realname_value;
      unsigned long realname_size;
      my_bool realname_null;

      // email
      //
      details::buffer email_value;
      unsigned long email_size;
      my_bool email_null;

      // backup_email
      //
      details::buffer backup_email_value;
      unsigned long backup_email_size;
      my_bool backup_email_null;

      // password
      //
      details::buffer password_value;
      unsigned long password_size;
      my_bool password_null;

      // token
      //
      details::buffer token_value;
      unsigned long token_size;
      my_bool token_null;

      // level
      //
      unsigned short level_value;
      my_bool level_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // toons
    //
    struct toons_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::Alarmud::user::toonVector container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef mysql::container_statements< toons_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        details::buffer value_value;
        unsigned long value_size;
        my_bool value_null;

        std::size_t version;
      };

      static void
      bind (MYSQL_BIND*,
            const MYSQL_BIND* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            my_bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    static odb::details::shared_ptr<prepared_query_impl>
    prepare_query (connection&, const char*, const query_base_type&);

    static odb::details::shared_ptr<prepared_query_impl>
    prepare_query (connection&, const char*, const odb::query_base&);

    static odb::details::shared_ptr<result_impl>
    execute_query (prepared_query_impl&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // legacy
  //
  template <typename A>
  struct query_columns< ::Alarmud::legacy, id_mysql, A >
  {
    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    name_type_;

    static const name_type_ name;

    // realname
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    realname_type_;

    static const realname_type_ realname;

    // email1
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    email1_type_;

    static const email1_type_ email1;

    // email2
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    email2_type_;

    static const email2_type_ email2;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::Alarmud::legacy, id_mysql, A >::name_type_
  query_columns< ::Alarmud::legacy, id_mysql, A >::
  name (query_columns< ::Alarmud::legacy, id_common, typename A::common_traits >::name,
        A::table_name, "`name`", 0);

  template <typename A>
  const typename query_columns< ::Alarmud::legacy, id_mysql, A >::realname_type_
  query_columns< ::Alarmud::legacy, id_mysql, A >::
  realname (query_columns< ::Alarmud::legacy, id_common, typename A::common_traits >::realname,
            A::table_name, "`realname`", 0);

  template <typename A>
  const typename query_columns< ::Alarmud::legacy, id_mysql, A >::email1_type_
  query_columns< ::Alarmud::legacy, id_mysql, A >::
  email1 (query_columns< ::Alarmud::legacy, id_common, typename A::common_traits >::email1,
          A::table_name, "`email1`", 0);

  template <typename A>
  const typename query_columns< ::Alarmud::legacy, id_mysql, A >::email2_type_
  query_columns< ::Alarmud::legacy, id_mysql, A >::
  email2 (query_columns< ::Alarmud::legacy, id_common, typename A::common_traits >::email2,
          A::table_name, "`email2`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  struct pointer_query_columns< ::Alarmud::legacy, id_mysql, A >:
    query_columns< ::Alarmud::legacy, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::Alarmud::legacy, id_mysql >:
    public access::object_traits< ::Alarmud::legacy >
  {
    public:
    typedef access::object_traits_impl< ::Alarmud::legacy, id_common > common_traits;

    struct id_image_type
    {
      details::buffer id_value;
      unsigned long id_size;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // name
      //
      details::buffer name_value;
      unsigned long name_size;
      my_bool name_null;

      // realname
      //
      details::buffer realname_value;
      unsigned long realname_size;
      my_bool realname_null;

      // email1
      //
      details::buffer email1_value;
      unsigned long email1_size;
      my_bool email1_null;

      // email2
      //
      details::buffer email2_value;
      unsigned long email2_size;
      my_bool email2_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static result<object_type>
    query (database&, const odb::query_base&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const odb::query_base&);

    static odb::details::shared_ptr<prepared_query_impl>
    prepare_query (connection&, const char*, const query_base_type&);

    static odb::details::shared_ptr<prepared_query_impl>
    prepare_query (connection&, const char*, const odb::query_base&);

    static odb::details::shared_ptr<result_impl>
    execute_query (prepared_query_impl&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // toon
  //
  template <>
  struct alias_traits<
    ::Alarmud::user,
    id_mysql,
    access::object_traits_impl< ::Alarmud::toon, id_mysql >::owner_id_tag>
  {
    typedef alias_traits<
      ::Alarmud::user,
      id_common,
      access::object_traits_impl< ::Alarmud::toon, id_mysql >::owner_id_tag>
    common_traits;

    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::Alarmud::toon, id_mysql >
  {
    // owner_id
    //
    typedef
    odb::alias_traits<
      ::Alarmud::user,
      id_mysql,
      access::object_traits_impl< ::Alarmud::toon, id_mysql >::owner_id_tag>
    owner_id_alias_;
  };

  template <typename A>
  struct query_columns< ::Alarmud::toon, id_mysql, A >:
    query_columns_base< ::Alarmud::toon, id_mysql >
  {
    // name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    name_type_;

    static const name_type_ name;

    // password
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    password_type_;

    static const password_type_ password;

    // owner_id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    owner_id_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::Alarmud::user,
        id_mysql,
        owner_id_alias_ > >
    owner_id_pointer_type_;

    struct owner_id_type_: owner_id_pointer_type_, owner_id_column_type_
    {
      owner_id_type_ (odb::query_column< long long unsigned int >& qc,
                      const char* t, const char* c, const char* conv)
        : owner_id_column_type_ (qc, t, c, conv)
      {
      }
    };

    static const owner_id_type_ owner_id;
  };

#ifdef ODB_MYSQL_QUERY_COLUMNS_DEF

  template <typename A>
  const typename query_columns< ::Alarmud::toon, id_mysql, A >::name_type_
  query_columns< ::Alarmud::toon, id_mysql, A >::
  name (query_columns< ::Alarmud::toon, id_common, typename A::common_traits >::name,
        A::table_name, "`name`", 0);

  template <typename A>
  const typename query_columns< ::Alarmud::toon, id_mysql, A >::password_type_
  query_columns< ::Alarmud::toon, id_mysql, A >::
  password (query_columns< ::Alarmud::toon, id_common, typename A::common_traits >::password,
            A::table_name, "`password`", 0);

  template <typename A>
  const typename query_columns< ::Alarmud::toon, id_mysql, A >::owner_id_type_
  query_columns< ::Alarmud::toon, id_mysql, A >::
  owner_id (query_columns< ::Alarmud::toon, id_common, typename A::common_traits >::owner_id,
            A::table_name, "`owner_id`", 0);

#endif // ODB_MYSQL_QUERY_COLUMNS_DEF

  // user
  //
  // legacy
  //
}

#include "account-odb-mysql.ixx"

#include <odb/post.hxx>

#endif // ACCOUNT_ODB_MYSQL_HXX
