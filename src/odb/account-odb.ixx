// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/database.hxx>

namespace odb
{
  // toonExtra
  //

  inline
  access::object_traits< ::Alarmud::toonExtra >::id_type
  access::object_traits< ::Alarmud::toonExtra >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::Alarmud::toonExtra >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::Alarmud::toonExtra >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits_impl< ::Alarmud::toonExtra, id_common >::
  persist (database& db, object_type& o)
  {
    function_table[db.id ()]->persist (db, o);
  }

  inline
  access::object_traits_impl< ::Alarmud::toonExtra, id_common >::pointer_type
  access::object_traits_impl< ::Alarmud::toonExtra, id_common >::
  find (database& db, const id_type& id)
  {
    return function_table[db.id ()]->find1 (db, id);
  }

  inline
  bool access::object_traits_impl< ::Alarmud::toonExtra, id_common >::
  find (database& db, const id_type& id, object_type& o)
  {
    return function_table[db.id ()]->find2 (db, id, o);
  }

  inline
  bool access::object_traits_impl< ::Alarmud::toonExtra, id_common >::
  reload (database& db, object_type& o)
  {
    return function_table[db.id ()]->reload (db, o);
  }

  inline
  void access::object_traits_impl< ::Alarmud::toonExtra, id_common >::
  update (database& db, const object_type& o)
  {
    function_table[db.id ()]->update (db, o);
  }

  inline
  void access::object_traits_impl< ::Alarmud::toonExtra, id_common >::
  erase (database& db, const id_type& id)
  {
    function_table[db.id ()]->erase1 (db, id);
  }

  inline
  void access::object_traits_impl< ::Alarmud::toonExtra, id_common >::
  erase (database& db, const object_type& o)
  {
    function_table[db.id ()]->erase2 (db, o);
  }

  inline
  result< access::object_traits_impl< ::Alarmud::toonExtra, id_common >::object_type >
  access::object_traits_impl< ::Alarmud::toonExtra, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  unsigned long long access::object_traits_impl< ::Alarmud::toonExtra, id_common >::
  erase_query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->erase_query (db, q);
  }

  inline
  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::Alarmud::toonExtra, id_common >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    return function_table[c.database ().id ()]->prepare_query (c, n, q);
  }

  inline
  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::Alarmud::toonExtra, id_common >::
  execute_query (prepared_query_impl& pq)
  {
    return function_table[pq.conn.database ().id ()]->execute_query (pq);
  }

  // toonRent
  //

  inline
  access::object_traits< ::Alarmud::toonRent >::id_type
  access::object_traits< ::Alarmud::toonRent >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::Alarmud::toonRent >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::Alarmud::toonRent >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits_impl< ::Alarmud::toonRent, id_common >::
  persist (database& db, object_type& o)
  {
    function_table[db.id ()]->persist (db, o);
  }

  inline
  access::object_traits_impl< ::Alarmud::toonRent, id_common >::pointer_type
  access::object_traits_impl< ::Alarmud::toonRent, id_common >::
  find (database& db, const id_type& id)
  {
    return function_table[db.id ()]->find1 (db, id);
  }

  inline
  bool access::object_traits_impl< ::Alarmud::toonRent, id_common >::
  find (database& db, const id_type& id, object_type& o)
  {
    return function_table[db.id ()]->find2 (db, id, o);
  }

  inline
  bool access::object_traits_impl< ::Alarmud::toonRent, id_common >::
  reload (database& db, object_type& o)
  {
    return function_table[db.id ()]->reload (db, o);
  }

  inline
  void access::object_traits_impl< ::Alarmud::toonRent, id_common >::
  update (database& db, const object_type& o)
  {
    function_table[db.id ()]->update (db, o);
  }

  inline
  void access::object_traits_impl< ::Alarmud::toonRent, id_common >::
  erase (database& db, const id_type& id)
  {
    function_table[db.id ()]->erase1 (db, id);
  }

  inline
  void access::object_traits_impl< ::Alarmud::toonRent, id_common >::
  erase (database& db, const object_type& o)
  {
    function_table[db.id ()]->erase2 (db, o);
  }

  inline
  result< access::object_traits_impl< ::Alarmud::toonRent, id_common >::object_type >
  access::object_traits_impl< ::Alarmud::toonRent, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  unsigned long long access::object_traits_impl< ::Alarmud::toonRent, id_common >::
  erase_query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->erase_query (db, q);
  }

  inline
  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::Alarmud::toonRent, id_common >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    return function_table[c.database ().id ()]->prepare_query (c, n, q);
  }

  inline
  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::Alarmud::toonRent, id_common >::
  execute_query (prepared_query_impl& pq)
  {
    return function_table[pq.conn.database ().id ()]->execute_query (pq);
  }

  // toon
  //

  inline
  access::object_traits< ::Alarmud::toon >::id_type
  access::object_traits< ::Alarmud::toon >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::Alarmud::toon >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::Alarmud::toon >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits_impl< ::Alarmud::toon, id_common >::
  persist (database& db, object_type& o)
  {
    function_table[db.id ()]->persist (db, o);
  }

  inline
  access::object_traits_impl< ::Alarmud::toon, id_common >::pointer_type
  access::object_traits_impl< ::Alarmud::toon, id_common >::
  find (database& db, const id_type& id)
  {
    return function_table[db.id ()]->find1 (db, id);
  }

  inline
  bool access::object_traits_impl< ::Alarmud::toon, id_common >::
  find (database& db, const id_type& id, object_type& o)
  {
    return function_table[db.id ()]->find2 (db, id, o);
  }

  inline
  bool access::object_traits_impl< ::Alarmud::toon, id_common >::
  reload (database& db, object_type& o)
  {
    return function_table[db.id ()]->reload (db, o);
  }

  inline
  void access::object_traits_impl< ::Alarmud::toon, id_common >::
  update (database& db, const object_type& o)
  {
    function_table[db.id ()]->update (db, o);
  }

  inline
  void access::object_traits_impl< ::Alarmud::toon, id_common >::
  erase (database& db, const id_type& id)
  {
    function_table[db.id ()]->erase1 (db, id);
  }

  inline
  void access::object_traits_impl< ::Alarmud::toon, id_common >::
  erase (database& db, const object_type& o)
  {
    function_table[db.id ()]->erase2 (db, o);
  }

  inline
  result< access::object_traits_impl< ::Alarmud::toon, id_common >::object_type >
  access::object_traits_impl< ::Alarmud::toon, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  unsigned long long access::object_traits_impl< ::Alarmud::toon, id_common >::
  erase_query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->erase_query (db, q);
  }

  inline
  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::Alarmud::toon, id_common >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    return function_table[c.database ().id ()]->prepare_query (c, n, q);
  }

  inline
  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::Alarmud::toon, id_common >::
  execute_query (prepared_query_impl& pq)
  {
    return function_table[pq.conn.database ().id ()]->execute_query (pq);
  }

  // user
  //

  inline
  access::object_traits< ::Alarmud::user >::id_type
  access::object_traits< ::Alarmud::user >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::Alarmud::user >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::Alarmud::user >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits_impl< ::Alarmud::user, id_common >::
  persist (database& db, object_type& o)
  {
    function_table[db.id ()]->persist (db, o);
  }

  inline
  access::object_traits_impl< ::Alarmud::user, id_common >::pointer_type
  access::object_traits_impl< ::Alarmud::user, id_common >::
  find (database& db, const id_type& id)
  {
    return function_table[db.id ()]->find1 (db, id);
  }

  inline
  bool access::object_traits_impl< ::Alarmud::user, id_common >::
  find (database& db, const id_type& id, object_type& o)
  {
    return function_table[db.id ()]->find2 (db, id, o);
  }

  inline
  bool access::object_traits_impl< ::Alarmud::user, id_common >::
  reload (database& db, object_type& o)
  {
    return function_table[db.id ()]->reload (db, o);
  }

  inline
  void access::object_traits_impl< ::Alarmud::user, id_common >::
  update (database& db, const object_type& o)
  {
    function_table[db.id ()]->update (db, o);
  }

  inline
  void access::object_traits_impl< ::Alarmud::user, id_common >::
  erase (database& db, const id_type& id)
  {
    function_table[db.id ()]->erase1 (db, id);
  }

  inline
  void access::object_traits_impl< ::Alarmud::user, id_common >::
  erase (database& db, const object_type& o)
  {
    function_table[db.id ()]->erase2 (db, o);
  }

  inline
  result< access::object_traits_impl< ::Alarmud::user, id_common >::object_type >
  access::object_traits_impl< ::Alarmud::user, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  unsigned long long access::object_traits_impl< ::Alarmud::user, id_common >::
  erase_query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->erase_query (db, q);
  }

  inline
  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::Alarmud::user, id_common >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    return function_table[c.database ().id ()]->prepare_query (c, n, q);
  }

  inline
  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::Alarmud::user, id_common >::
  execute_query (prepared_query_impl& pq)
  {
    return function_table[pq.conn.database ().id ()]->execute_query (pq);
  }

  // userCount
  //

  inline
  void access::view_traits< ::Alarmud::userCount >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  result< access::view_traits_impl< ::Alarmud::userCount, id_common >::view_type >
  access::view_traits_impl< ::Alarmud::userCount, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  odb::details::shared_ptr<prepared_query_impl>
  access::view_traits_impl< ::Alarmud::userCount, id_common >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    return function_table[c.database ().id ()]->prepare_query (c, n, q);
  }

  inline
  odb::details::shared_ptr<result_impl>
  access::view_traits_impl< ::Alarmud::userCount, id_common >::
  execute_query (prepared_query_impl& pq)
  {
    return function_table[pq.conn.database ().id ()]->execute_query (pq);
  }

  // legacy
  //

  inline
  access::object_traits< ::Alarmud::legacy >::id_type
  access::object_traits< ::Alarmud::legacy >::
  id (const object_type& o)
  {
    return o.name;
  }

  inline
  void access::object_traits< ::Alarmud::legacy >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::Alarmud::legacy >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits_impl< ::Alarmud::legacy, id_common >::
  persist (database& db, const object_type& o)
  {
    function_table[db.id ()]->persist (db, o);
  }

  inline
  access::object_traits_impl< ::Alarmud::legacy, id_common >::pointer_type
  access::object_traits_impl< ::Alarmud::legacy, id_common >::
  find (database& db, const id_type& id)
  {
    return function_table[db.id ()]->find1 (db, id);
  }

  inline
  bool access::object_traits_impl< ::Alarmud::legacy, id_common >::
  find (database& db, const id_type& id, object_type& o)
  {
    return function_table[db.id ()]->find2 (db, id, o);
  }

  inline
  bool access::object_traits_impl< ::Alarmud::legacy, id_common >::
  reload (database& db, object_type& o)
  {
    return function_table[db.id ()]->reload (db, o);
  }

  inline
  void access::object_traits_impl< ::Alarmud::legacy, id_common >::
  update (database& db, const object_type& o)
  {
    function_table[db.id ()]->update (db, o);
  }

  inline
  void access::object_traits_impl< ::Alarmud::legacy, id_common >::
  erase (database& db, const id_type& id)
  {
    function_table[db.id ()]->erase1 (db, id);
  }

  inline
  void access::object_traits_impl< ::Alarmud::legacy, id_common >::
  erase (database& db, const object_type& o)
  {
    function_table[db.id ()]->erase2 (db, o);
  }

  inline
  result< access::object_traits_impl< ::Alarmud::legacy, id_common >::object_type >
  access::object_traits_impl< ::Alarmud::legacy, id_common >::
  query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->query (db, q);
  }

  inline
  unsigned long long access::object_traits_impl< ::Alarmud::legacy, id_common >::
  erase_query (database& db, const query_base_type& q)
  {
    return function_table[db.id ()]->erase_query (db, q);
  }

  inline
  odb::details::shared_ptr<prepared_query_impl>
  access::object_traits_impl< ::Alarmud::legacy, id_common >::
  prepare_query (connection& c, const char* n, const query_base_type& q)
  {
    return function_table[c.database ().id ()]->prepare_query (c, n, q);
  }

  inline
  odb::details::shared_ptr<result_impl>
  access::object_traits_impl< ::Alarmud::legacy, id_common >::
  execute_query (prepared_query_impl& pq)
  {
    return function_table[pq.conn.database ().id ()]->execute_query (pq);
  }
}

