// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include <odb/database.hxx>
#include <odb/schema-catalog-impl.hxx>

#include <odb/details/unused.hxx>

namespace odb
{
  static bool
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("DROP TABLE IF EXISTS `legacy`");
          db.execute ("DROP TABLE IF EXISTS `user`");
          db.execute ("DROP TABLE IF EXISTS `toon`");
          db.execute ("DROP TABLE IF EXISTS `toonRent`");
          db.execute ("DROP TABLE IF EXISTS `toonExtra`");
          db.execute ("CREATE TABLE IF NOT EXISTS `schema_version` (\n"
                      "  `name` VARCHAR(255) NOT NULL PRIMARY KEY,\n"
                      "  `version` BIGINT UNSIGNED NOT NULL,\n"
                      "  `migration` TINYINT(1) NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("DELETE FROM `schema_version`\n"
                      "  WHERE `name` = 'account'");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE `toonExtra` (\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\n"
                      "  `field` varchar(32) NOT NULL,\n"
                      "  `value` varchar(1024) NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE INDEX `idfield`\n"
                      "  ON `toonExtra` (\n"
                      "    `id`,\n"
                      "    `field`)");
          db.execute ("CREATE TABLE `toonRent` (\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\n"
                      "  `vnum` BIGINT UNSIGNED NOT NULL,\n"
                      "  `effects` varchar(10240) NOT NULL,\n"
                      "  `bank` TINYINT(1) NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE TABLE `toon` (\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\n"
                      "  `name` varchar(32) NOT NULL,\n"
                      "  `password` varchar(16) NOT NULL,\n"
                      "  `title` varchar(128) NOT NULL,\n"
                      "  `lastlogin` DATETIME NULL,\n"
                      "  `owner_id` BIGINT UNSIGNED NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE UNIQUE INDEX `name_i`\n"
                      "  ON `toon` (`name`)");
          db.execute ("CREATE INDEX `owner_id_i`\n"
                      "  ON `toon` (`owner_id`)");
          db.execute ("CREATE TABLE `user` (\n"
                      "  `id` BIGINT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,\n"
                      "  `nickname` VARCHAR(255) NOT NULL,\n"
                      "  `email` VARCHAR(255) NOT NULL,\n"
                      "  `registered` DATETIME NULL,\n"
                      "  `password` VARCHAR(128) NOT NULL,\n"
                      "  `level` SMALLINT UNSIGNED NOT NULL DEFAULT 0,\n"
                      "  `backup_email` VARCHAR(255) NULL,\n"
                      "  `ptr` TINYINT(1) NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("CREATE UNIQUE INDEX `email_i`\n"
                      "  ON `user` (`email`)");
          db.execute ("CREATE TABLE `legacy` (\n"
                      "  `name` varchar(32) NOT NULL PRIMARY KEY,\n"
                      "  `realname` varchar(255) NOT NULL,\n"
                      "  `email1` varchar(255) NOT NULL,\n"
                      "  `email2` varchar(255) NOT NULL)\n"
                      " ENGINE=InnoDB");
          return true;
        }
        case 2:
        {
          db.execute ("CREATE TABLE IF NOT EXISTS `schema_version` (\n"
                      "  `name` VARCHAR(255) NOT NULL PRIMARY KEY,\n"
                      "  `version` BIGINT UNSIGNED NOT NULL,\n"
                      "  `migration` TINYINT(1) NOT NULL)\n"
                      " ENGINE=InnoDB");
          db.execute ("INSERT IGNORE INTO `schema_version` (\n"
                      "  `name`, `version`, `migration`)\n"
                      "  VALUES ('account', 1, 0)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_create_entry
  create_schema_entry_ (
    id_mysql,
    "account",
    &create_schema);

  static const schema_catalog_migrate_entry
  migrate_schema_entry_1_ (
    id_mysql,
    "account",
    1ULL,
    0);
}

#include <odb/post.hxx>
